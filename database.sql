DROP DATABASE IF EXISTS TEC;
CREATE DATABASE TEC;
USE TEC;

CREATE TABLE CANDIDATE(
    CANDIDATE_ID INTEGER PRIMARY KEY,
    CANDIDATE_FNAME VARCHAR(20) NOT NULL,
    CANDIDATE_LNAME VARCHAR(20),
    CANDIDATE_PHONE CHAR(11),
    CANDIDATE_EMAIL VARCHAR(50),
    CANDIDATE_ADDR VARCHAR(100)
);

CREATE TABLE QUALIFICATION(
    QUAL_CODE VARCHAR(15) PRIMARY KEY,
    QUAL_DESC VARCHAR(250) NOT NULL
);

CREATE TABLE CANDIDATE_QUALIFICATIONS(
    QUAL_CODE VARCHAR(15) NOT NULL,
    CANDIDATE_ID INTEGER NOT NULL,
    PRIMARY KEY(QUAL_CODE, CANDIDATE_ID),
    FOREIGN KEY (QUAL_CODE) REFERENCES QUALIFICATION(QUAL_CODE),
    FOREIGN KEY(CANDIDATE_ID) REFERENCES CANDIDATE(CANDIDATE_ID)
);

CREATE TABLE COMPANY(
    COMPANY_ID INTEGER PRIMARY KEY,
    COMPANY_NAME VARCHAR(50) NOT NULL,
    COMPANY_PHONE CHAR(11),
    COMPANY_EMAIL VARCHAR(50),
    COMPANY_ADDR VARCHAR(100)
);

CREATE TABLE OPENING(
    OPENING_ID INTEGER PRIMARY KEY,
    COMPANY_ID INTEGER NOT NULL,
    NUM_OF_POSITIONS INTEGER NOT NULL,
    START_DT DATE NOT NULL,
    END_DT DATE, 
    HOURLY_PAY DECIMAL(9,2) NOT NULL,
    FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(COMPANY_ID)
);

CREATE TABLE PLACEMENT(
    PLACEMENT_ID INTEGER PRIMARY KEY,
    OPENING_ID INTEGER NOT NULL,
    CANDIDATE_ID INTEGER NOT NULL,
    TOTAL_HOURS INTEGER NOT NULL,
    FOREIGN KEY (OPENING_ID) REFERENCES OPENING(OPENING_ID),
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATE(CANDIDATE_ID)
);

CREATE TABLE JOB_HISTORY(
    JOB_HISTORY_ID INTEGER PRIMARY KEY,
    CANDIDATE_ID INTEGER NOT NULL,
    PLACEMENT_ID INTEGER, 
    START_DT DATE NOT NULL,
    END_DT DATE NOT NULL,
    TOTAL_HOURS INTEGER NOT NULL,
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATE(CANDIDATE_ID),
    FOREIGN KEY (PLACEMENT_ID) REFERENCES PLACEMENT(PLACEMENT_ID)
);

CREATE TABLE OPENING_QUALIFICATIONS(
    OPENING_ID INTEGER NOT NULL,
    QUAL_CODE VARCHAR(15) NOT NULL,
    PRIMARY KEY (OPENING_ID, QUAL_CODE),
    FOREIGN KEY (OPENING_ID) REFERENCES OPENING(OPENING_ID),
    FOREIGN KEY (QUAL_CODE) REFERENCES QUALIFICATION(QUAL_CODE)
);

CREATE TABLE COURSE(
    COURSE_ID INTEGER PRIMARY KEY,
    COURSE_NAME VARCHAR(100) NOT NULL,
    QUAL_CODE VARCHAR(15) NOT NULL,
    FOREIGN KEY (QUAL_CODE) REFERENCES QUALIFICATION(QUAL_CODE)
);

CREATE TABLE SESSION(
    SESSION_ID INTEGER PRIMARY KEY,
    COURSE_ID INTEGER NOT NULL,
    START_TIME DATETIME NOT NULL,
    END_TIME DATETIME NOT NULL,
    SESSION_FEE DECIMAL(9,2) NOT NULL,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE SESSION_CANDIDATES(
    SESSION_ID INTEGER NOT NULL,
    CANDIDATE_ID INTEGER NOT NULL,
    PRIMARY KEY (SESSION_ID, CANDIDATE_ID),
    FOREIGN KEY (SESSION_ID) REFERENCES SESSION(SESSION_ID),
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATE(CANDIDATE_ID)
);

CREATE TABLE COURSE_PREREQS(
    COURSE_ID INTEGER NOT NULL,
    QUAL_CODE VARCHAR(15) NOT NULL,
    PRIMARY KEY (COURSE_ID, QUAL_CODE),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (QUAL_CODE) REFERENCES QUALIFICATION(QUAL_CODE)
);


-- QUALIFICATION VALUES --
INSERT INTO QUALIFICATION (QUAL_CODE,QUAL_DESC) VALUES
('SEC-45','secretarial work; candidate must type at least 45 words per minute'),
('SEC-60','secretarial work; candidate must type at least 60 words per minute'),
('CLERK','General clerking work'),
('PRG-PY','Programmer, Python'),
('PRG-C++', 'Programmer, C++'),
('DBA-ORA','database Administrator, Oracle'),
('DBA-DB2','Database Administrator, IBM DB2'),
('DBA-SQLSERV','Database Administrator, MS SQL Server'),
('SYS-1','Systems Analyst, level 1'),
('SYS-2','Systems Analyst, level 2'),
('NW-CIS','Network Administrator, Cisco experience'),
('WD-CF','Web Developer, ColdFusion');

